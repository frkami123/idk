.. =============================================================================
..
.. ztd.idk
.. Copyright Â© JeanHeyd "ThePhD" Meneide and Shepherd's Oasis, LLC
.. Contact: opensource@soasis.org
..
.. Commercial License Usage
.. Licensees holding valid commercial ztd.idk licenses may use this file in
.. accordance with the commercial license agreement provided with the
.. Software or, alternatively, in accordance with the terms contained in
.. a written agreement between you and Shepherd's Oasis, LLC.
.. For licensing terms and conditions see your agreement. For
.. further information contact opensource@soasis.org.
..
.. Apache License Version 2 Usage
.. Alternatively, this file may be used under the terms of Apache License
.. Version 2.0 (the "License") for non-commercial use; you may not use this
.. file except in compliance with the License. You may obtain a copy of the
.. License at
..
.. https://www.apache.org/licenses/LICENSE-2.0
..
.. Unless required by applicable law or agreed to in writing, software
.. distributed under the License is distributed on an "AS IS" BASIS,
.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
.. See the License for the specific language governing permissions and
.. limitations under the License.
..
.. =============================================================================>

``c_span``
==========

``c_span`` is a type that is generated by defining the macro ``ZTD_IDK_C_SPAN_TYPE`` to a specific type name and including the header ``#include <ztd/idk/c_span.g.h>``. Occasionally, some types include spaces or similar, and therefore need some additional tweaking in order to handle it all properly. This comes up to forming 3 different macros which can help control configuration:

- ``ZTD_IDK_C_SPAN_TYPE``, the type;
- ``ZTD_IDK_C_SPAN_TYPE_IS_CONST``, an optional definition that, if defined,  must be either 1 or 0. If 1, it indicates that the stored pointer should be to a `const T` type;
- ``ZTD_IDK_C_SPAN_TYPE_NAME``, an optional name of the type if it should not be derived directly from the type itself (defaults to ``ZTD_ID_C_SPAN_TYPE``);
- ``ZTD_IDK_C_SPAN_SIZE_TYPE``, an optional type name used to control the type for the storage of the ``size`` (defaults to ``size_t``).
- ``ZTD_IDK_C_SPAN_SIZE_TYPE_NAME``, an optional suffix for the ``c_span``\ 's name to override the default which is generated from the type (defaults to ``ZTD_ID_C_SPAN_SIZE_TYPE``); and,
- ``ZTD_IDK_C_SPAN_NAME``, an optional override for the entire name of the structure and its functions (ignores all previous name-based derivations).
- ``ZTD_IDK_C_SPAN_SIZE_FIRST``, an optional definition that, if defined, must be either 1 or 0. If 1, it indicates that the size member should go first.

The final name is composed of either just the type name suffixed on ``c_span``; the type name and the size type name (if defined) suffixed onto ``c_span``; or, the the full name provided in the override.

.. important::

	Any macros that are consumed by this header are undefined by the end of the header, including the ones listed above.

The ``<ztd/idk/c_span.h>`` header includes some common definitions of a ``c_span`` to be used, most notably ``c_span_uchar``. The documentation below is for ``c_span_uchar``, but works for all entities.

.. note::

	|generic_type|




Structure + Functions
---------------------

.. doxygengroup:: ztd_idk_c_c_span
	:content-only:




Defines
-------

.. doxygengroup:: ztd_idk_c_c_span_defines
	:content-only:
